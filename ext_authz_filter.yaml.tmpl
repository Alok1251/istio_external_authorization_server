apiVersion: v1
kind: Namespace
metadata:
  name: authz-ns
  labels:
    istio-injection: enabled
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: ext-authz-filter
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      app: istio-ingressgateway
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: "envoy.http_connection_manager"
              subFilter:
                name: "envoy.router"
      patch:
        operation: INSERT_BEFORE
        value:
         name: envoy.ext_authz
         config:
           grpc_service:
             envoy_grpc:
               cluster_name: patched.authz.authz-ns.svc.cluster.local
---
# https://github.com/istio/istio/issues/21841
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: ext-authz-filter-cluster-patch
  namespace: istio-system
spec:
  workloadLabels:
    app: istio-ingressgateway
  configPatches:
  - applyTo: CLUSTER
    match:
      cluster:
        service: authz.authz-ns.svc.cluster.local
    patch:
      operation: MERGE
      value:
        name: "patched.authz.authz-ns.svc.cluster.local"
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: authz
  namespace: authz-ns
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: authz
    spec:
      serviceAccountName: authz-sa
      containers:
      - name: authz-container
        image: salrashid123/ext-authz-server-test
        volumeMounts:
        - name: keyfile
          mountPath: "/data/certs"
          readOnly: true        
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 50051
        env:
        - name: ALLOWED_USERS
          valueFrom:
            configMapKeyRef:
              name: authz-config
              key: allowedusers                               
        - name: AUTHZ_SERVER_KEY_ID
          valueFrom:
            configMapKeyRef:
              name: authz-config
              key: authzserverkeyid
        - name: AUTHZ_ISSUER
          valueFrom:
            configMapKeyRef:
              name: authz-config
              key: authzissuer              
      volumes:
      - name: keyfile
        secret:
          secretName: svc-secret
---
apiVersion: v1
data:
  key.pem: $SVC_ACCOUNT_KEY
kind: Secret
metadata:
  name: svc-secret
  namespace: authz-ns
type: Opaque
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: authz-config
  namespace: authz-ns
data:
  allowedusers: "alice,bob,carol"
  authzserverkeyid: "$KEY_ID"
  authzissuer: "$SERVICE_ACCOUNT_EMAIL"
---
apiVersion: v1
kind: Service
metadata:
  name: authz
  namespace: authz-ns
  labels:
    app: authz
spec:
  ports:
  - port: 50051
    targetPort: 50051
    name: grpc
  selector:
    app: authz
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: authz-sa
  namespace: authz-ns
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: authz-virtualservice
  namespace: authz-ns
spec:
  hosts:
  - authz
  gateways:
  - mesh
  http:      
  - route:
    - destination:
        host: authz   
    match:
    - sourceLabels:
        app: istio-ingressgateway               
        istio: ingressgateway
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: authz-destination
  namespace: authz-ns
spec:
  host: "auth.authz-ns.svc.cluster.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
---
##  ingress --> authz
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: ing-authzserver-peer-authn-policy
  namespace: authz-ns
spec:
  selector:
    matchLabels:
      app: authz
  mtls:
    mode: STRICT
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: ing-authzserver-authz-policy
 namespace: authz-ns
spec:
 action: ALLOW
 selector:
   matchLabels:
     app: authz
 rules:
 - from:
   - source:
       principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
---
## default deny all
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: deny-all-authz-ns
 namespace: authz-ns
spec:
  {} 
---
## ingress --> svc1
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
 name: ing-svc1-request-authn-policy
 namespace: default
spec:
  selector:
    matchLabels:
      app: svc1
  jwtRules:
  - issuer: "$SERVICE_ACCOUNT_EMAIL"
    audiences:
    - "http://svc1.default.svc.cluster.local:8080/"  
    jwksUri: "https://www.googleapis.com/service_accounts/v1/jwk/$SERVICE_ACCOUNT_EMAIL"
    forwardOriginalToken: true
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: ing-svc1-authz-policy
 namespace: default
spec:
 action: ALLOW
 selector:
   matchLabels:
     app: svc1
 rules:
 - from:
   - source:
       principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
   to:
   - operation:
       methods: ["GET"]
   when:
   - key: request.auth.claims[iss]
     values: ["$SERVICE_ACCOUNT_EMAIL"]
   - key: request.auth.claims[aud]
     values: ["http://svc1.default.svc.cluster.local:8080/"]          
---
## ingress --> svc2
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
 name: ing-svc2-request-authn-policy
 namespace: default
spec:
  selector:
    matchLabels:
      app: svc2
  jwtRules:
  - issuer: "$SERVICE_ACCOUNT_EMAIL"
    audiences:
    - "http://svc2.default.svc.cluster.local:8080/"  
    jwksUri: "https://www.googleapis.com/service_accounts/v1/jwk/$SERVICE_ACCOUNT_EMAIL" 
    forwardOriginalToken: true 
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: ing-svc2-authz-policy
 namespace: default
spec:
 action: ALLOW
 selector:
   matchLabels:
     app: svc2
 rules:
 - from:
   - source:
       principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
   to:
   - operation:
       methods: ["GET"]
   when:
   - key: request.auth.claims[iss]
     values: ["$SERVICE_ACCOUNT_EMAIL"]
   - key: request.auth.claims[aud]
     values: ["http://svc2.default.svc.cluster.local:8080/"]        
---
## default deny all
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: deny-all-default
 namespace: default
spec:
  {}
---
## svc --> be-v1
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
 name: svc-be-v1-request-authn-policy
 namespace: default
spec:
  selector:
    matchLabels:
      app: be
      version: v1
  jwtRules:
  - issuer: "$SERVICE_ACCOUNT_EMAIL"
    audiences:
    - "http://be.default.svc.cluster.local:8080/"   
    jwksUri: "https://www.googleapis.com/service_accounts/v1/jwk/$SERVICE_ACCOUNT_EMAIL"  
    # forwardOriginalToken: true
    outputPayloadToHeader: x-jwt-payload    
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: svc1-be-v1-authz-policy
 namespace: default
spec:
 action: ALLOW
 selector:
   matchLabels:
     app: be
     version: v1
 rules:
 - from:
   - source:
       principals: ["cluster.local/ns/default/sa/svc1-sa"]
   to:
   - operation:
       methods: ["GET"]
   when:
   - key: request.auth.claims[iss]
     values: ["$SERVICE_ACCOUNT_EMAIL"]
   - key: request.auth.claims[aud]
     values: ["http://be.default.svc.cluster.local:8080/"]        
---
## svc --> be-v2
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
 name: svc-be-v2-request-authn-policy
 namespace: default
spec:
  selector:
    matchLabels:
      app: be
      version: v2
  jwtRules:
  - issuer: "$SERVICE_ACCOUNT_EMAIL"
    audiences:
    - "http://be.default.svc.cluster.local:8080/"   
    jwksUri: "https://www.googleapis.com/service_accounts/v1/jwk/$SERVICE_ACCOUNT_EMAIL" 
    # forwardOriginalToken: true
    outputPayloadToHeader: x-jwt-payload
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: svc1-be-v2-authz-policy
 namespace: default
spec:
 action: ALLOW
 selector:
   matchLabels:
     app: be
     version: v2
 rules:
 - from:
   - source:
       principals: ["cluster.local/ns/default/sa/svc1-sa"]
   to:
   - operation:
       methods: ["GET"]
   when:
   - key: request.auth.claims[iss]
     values: ["$SERVICE_ACCOUNT_EMAIL"]
   - key: request.auth.claims[aud]
     values: ["http://be.default.svc.cluster.local:8080/"]        
